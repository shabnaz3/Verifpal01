//This is for pure Signature
attacker[active]


principal Alice_Node[
   knows public userA,hostnameA
   knows private a
   ga =G^a
]

principal Bob_Node[
   knows public userB,hostnameB
   knows private b
   gb =G^b
]

principal Alice_Node[
   token_A = CONCAT(userA,hostnameA,ga)
   sgn_A = SIGN(a,token_A)
]

 Alice_Node->Bob_Node :[sgn_A],[token_A]

principal Bob_Node[
   userA_,hostnameA_,ga_ = SPLIT(token_A) 
   storage = SIGNVERIF(ga_,token_A,sgn_A)?
      
]
principal Bob_Node[
   token_B = CONCAT(userB,hostnameB,gb)
   sgn_B =  SIGN(b, token_B)
]

 Bob_Node-> Alice_Node :[token_B],[sgn_B]

principal Alice_Node[
   userB_,hostnameB_,gb_ = SPLIT(token_B)
   proof  = SIGNVERIF(gb_,token_B,sgn_B)?
]

queries[  
    authentication? Alice_Node ->Bob_Node :sgn_A
    equivalence? ga,ga_
    authentication? Bob_Node ->Alice_Node :sgn_B
]
